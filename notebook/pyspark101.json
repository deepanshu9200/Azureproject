{
	"name": "pyspark101",
	"properties": {
		"folder": {
			"name": "Learning"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f0b91a5b-4dcc-4154-95c2-0a50fe8ff6f0"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/41e7dbb8-edc9-43da-b117-e8bffb8e870b/resourceGroups/Footballworldcup/providers/Microsoft.Synapse/workspaces/footballworldcupworkspace/bigDataPools/sparkpool",
				"name": "sparkpool",
				"type": "Spark",
				"endpoint": "https://footballworldcupworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"\r\n",
					"\r\n",
					"spark= SparkSession.builder.appName(\"pyspark101\").getOrCreate()\r\n",
					""
				],
				"execution_count": 62
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"1 version"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(spark.version)"
				],
				"execution_count": 63
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"2.index of a PySpark DataFrame into a column"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import rank,row_number\r\n",
					"from pyspark.sql.window import Window\r\n",
					"\r\n",
					"data = [[1,'deep','25'],\r\n",
					"[2,'fugh','56'],\r\n",
					"[3,'jenf','32']]\r\n",
					"\r\n",
					"schema = ['id','name','age']\r\n",
					"\r\n",
					"df=spark.createDataFrame(data,schema=schema)\r\n",
					"df.show()\r\n",
					"\r\n",
					"win=Window.orderBy(\"age\")\r\n",
					"\r\n",
					"ans_df= df.withColumn(\"Row_number\",row_number().over(win)) \\\r\n",
					".withColumn(\"Rank\",rank().over(win))\r\n",
					"ans_df.show()"
				],
				"execution_count": 64
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"3.combine many lists to form a PySpark DataFrame"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data1 = [[1,'deep','25'],\r\n",
					"[2,'fugh','56'],\r\n",
					"[3,'jenf','32']]\r\n",
					"\r\n",
					"schema1 = ['id','name','age']\r\n",
					"\r\n",
					"data2 = [[4,'gfjd','74'],\r\n",
					"[5,'ndmnf','34'],\r\n",
					"[6,'nfd','74']]\r\n",
					"\r\n",
					"schema2 = ['id','name','age']\r\n",
					"\r\n",
					"df1=spark.createDataFrame(data=data1,schema=schema1)\r\n",
					"\r\n",
					"df2=spark.createDataFrame(data=data2,schema=schema2)\r\n",
					"df3=df1.union(df2)\r\n",
					"df3.show()\r\n",
					"\r\n",
					"# Define your lists\r\n",
					"list1 = [\"a\", \"b\", \"c\", \"d\"]\r\n",
					"list2 = [1, 2, 3, 4]\r\n",
					"\r\n",
					"from pyspark import SparkContext\r\n",
					"\r\n",
					"sc=spark.sparkContext\r\n",
					"\r\n",
					"rdd= sc.parallelize(list(zip(list1,list2)))\r\n",
					"rdd1=rdd.collect()\r\n",
					"df = rdd.toDF([\"Column1\", \"Column2\"])\r\n",
					"\r\n",
					"print(rdd1)\r\n",
					"df.show()"
				],
				"execution_count": 65
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"4  get the items of list A not present in list B"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"list_A = [1, 2, 3, 4, 5]\r\n",
					"list_B = [4, 5, 6, 7, 8]\r\n",
					"\r\n",
					"rdd_A=sc.parallelize(list(list_A))\r\n",
					"rdd_B=sc.parallelize(list(list_B))\r\n",
					"rdd3=rdd_A.subtract(rdd_B)\r\n",
					"\r\n",
					"rdd4=rdd3.collect()\r\n",
					"print(rdd4)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"5 . get the items not common to both list A and list B"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"list_A = [1, 2, 3, 4, 5]\r\n",
					"list_B = [4, 5, 6, 7, 8]\r\n",
					"\r\n",
					"rdd_A=sc.parallelize(list(list_A))\r\n",
					"rdd_B=sc.parallelize(list(list_B))\r\n",
					"rdd3=rdd_A.intersection(rdd_B)\r\n",
					"rdd5=rdd_A.union(rdd_B)\r\n",
					"rdd6=rdd5.subtract(rdd3)\r\n",
					"\r\n",
					"rdd4=rdd3.collect()\r\n",
					"print(rdd4)\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**6 . minimum, 25th percentile, median, 75th, and max of a numeric column**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"data = [(\"A\", 10), (\"B\", 20), (\"C\", 30), (\"D\", 40), (\"E\", 50), (\"F\", 15), (\"G\", 28), (\"H\", 54), (\"I\", 41), (\"J\", 86)]\r\n",
					"df = spark.createDataFrame(data, [\"Name\", \"Age\"])\r\n",
					"from pyspark.sql.functions import rank,row_number,min,max,percent_rank, mean\r\n",
					"\r\n",
					"min_df=df.agg(min(df['Age'])).collect()[0][0]\r\n",
					"Max_df=df.agg(max(df['Age'])).collect()[0][0]\r\n",
					"\r\n",
					"mean_df=df.agg(mean(df['Age'])).collect()[0][0]\r\n",
					"\r\n",
					"print(min_df)\r\n",
					"print(Max_df)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"8.to get frequency counts of unique items of a column"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import Row\r\n",
					"\r\n",
					"# Sample data\r\n",
					"data = [\r\n",
					"Row(name='John', job='Engineer'),\r\n",
					"Row(name='John', job='Engineer'),\r\n",
					"Row(name='Mary', job='Scientist'),\r\n",
					"Row(name='Bob', job='Engineer'),\r\n",
					"Row(name='Bob', job='Engineer'),\r\n",
					"Row(name='Bob', job='Scientist'),\r\n",
					"Row(name='Sam', job='Doctor'),\r\n",
					"]\r\n",
					"\r\n",
					"# create DataFrame\r\n",
					"df = spark.createDataFrame(data)\r\n",
					"\r\n",
					"df1=df.groupBy(\"name\").count()\r\n",
					"# show DataFrame\r\n",
					"df1.show()\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**9. keep only top 2 most frequent values as it is and replace everything else as ‘Other’**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import Row\r\n",
					"\r\n",
					"# Sample data\r\n",
					"data = [\r\n",
					"Row(name='John', job='Engineer'),\r\n",
					"Row(name='John', job='Engineer'),\r\n",
					"Row(name='Mary', job='Scientist'),\r\n",
					"Row(name='Bob', job='Engineer'),\r\n",
					"Row(name='Bob', job='Engineer'),\r\n",
					"Row(name='Bob', job='Scientist'),\r\n",
					"Row(name='Sam', job='Doctor'),\r\n",
					"]\r\n",
					"\r\n",
					"# create DataFrame\r\n",
					"df = spark.createDataFrame(data)\r\n",
					"\r\n",
					"from pyspark.sql.functions import col, when\r\n",
					"df1=df.groupby('job').count().limit(2).select('job')\r\n",
					"\r\n",
					"#convert to list\r\n",
					"top_2_variable=df1.rdd.flatMap(lambda x: x).collect()\r\n",
					"print(top_2_variable)\r\n",
					"\r\n",
					"#Imp\r\n",
					"df3=df.withColumn(\"new_column\",when(df['job'].isin(top_2_variable),df['job']).otherwise('other'))\r\n",
					"df3.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"10. How to rename columns of a PySpark DataFrame using two lists – one containing the old column names and the other containing the new column names?"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.createDataFrame([(1, 2, 3), (4, 5, 6)], [\"col1\", \"col2\", \"col3\"])\r\n",
					"\r\n",
					"# old column names\r\n",
					"old_names = [\"col1\", \"col2\", \"col3\"]\r\n",
					"\r\n",
					"# new column names\r\n",
					"new_names = [\"new_col1\", \"new_col2\", \"new_col3\"]\r\n",
					"\r\n",
					"\r\n",
					"df.show()\r\n",
					"df1=df.withColumnRenamed('col1','new_col1') \\\r\n",
					"    .withColumnRenamed('col2','new_col2') \\\r\n",
					"    .withColumnRenamed('col3','new_col3') \r\n",
					"\r\n",
					"df1.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"9. How to Drop rows with NA values specific to a particular column?"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Assuming df is your DataFrame\r\n",
					"df = spark.createDataFrame([\r\n",
					"(\"A\", 1, None),\r\n",
					"(\"B\", None, \"123\" ),\r\n",
					"(\"B\", 3, \"456\"),\r\n",
					"(\"D\", None, None),\r\n",
					"], [\"Name\", \"Value\", \"id\"])\r\n",
					"\r\n",
					"df1=df.dropna(subset=['value','id'])\r\n",
					"df1.show()"
				],
				"execution_count": 69
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"13.How to find the numbers that are multiples of 3 from a column?"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import rand\r\n",
					"\r\n",
					"# Generate a DataFrame with a single column \"id\" with 10 rows\r\n",
					"df = spark.range(10)\r\n",
					"\r\n",
					"# Generate a random float between 0 and 1, scale and shift it to get a random integer between 1 and 10\r\n",
					"df = df.withColumn(\"random\", ((rand(seed=42) * 10) + 1).cast(\"int\"))\r\n",
					"df1=df.withColumn(\"Dividedby3\",df[random]/3)\r\n",
					"# Show the DataFrame\r\n",
					"df.show()"
				],
				"execution_count": 70
			}
		]
	}
}